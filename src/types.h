// This file is autogenerated from: fcgen/fastcat_types.yaml
// using the python cog tool.  Do not modify this file manually.
// Please make modifications to fcgen/types.h.cog

#ifndef FASTCAT_TYPES_H_
#define FASTCAT_TYPES_H_

#include <chrono>
#include <string>

#include "jsd/jsd_types.h"

namespace fastcat
{
//////////////////////////////////
// Device Commands
//////////////////////////////////
typedef struct {
  double duration;
} CommanderEnableCmd;

typedef struct {
  bool dummy;
} CommanderDisableCmd;

typedef struct {
  int32_t target_position;
  int32_t position_offset;
  int32_t velocity_offset;
  double  torque_offset_amps;
} EgdCspCmd;

typedef struct {
  int32_t target_velocity;
  int32_t velocity_offset;
  double  torque_offset_amps;
} EgdCsvCmd;

typedef struct {
  int32_t target_torque_amps;
  double  torque_offset_amps;
} EgdCstCmd;

typedef struct {
  int32_t  target_position;
  uint32_t profile_velocity;
  uint32_t end_velocity;
  uint32_t profile_accel;
  uint32_t profile_decel;
  uint8_t  relative;
} EgdProfPosCmd;

typedef struct {
  int32_t  target_velocity;
  uint32_t profile_accel;
  uint32_t profile_decel;
} EgdProfVelCmd;

typedef struct {
  double target_torque_amps;
} EgdProfTorqueCmd;

typedef struct {
  bool dummy;
} EgdResetCmd;

typedef struct {
  bool dummy;
} EgdHaltCmd;

typedef struct {
  int32_t drive_position;
} EgdSdoSetDrivePosCmd;

typedef struct {
  int32_t unit_mode;
} EgdSdoSetUnitModeCmd;

typedef struct {
  bool dummy;
} FtsTareCmd;

typedef struct {
  uint8_t channel;
  uint8_t level;
} El2124WriteChannelCmd;

typedef struct {
  uint8_t channel_ch1;
  uint8_t channel_ch2;
  uint8_t channel_ch3;
  uint8_t channel_ch4;
} El2124WriteAllChannelsCmd;

typedef struct {
  double target_position;
  double position_offset;
  double velocity_offset;
  double torque_offset_amps;
} ActuatorCspCmd;

typedef struct {
  double target_velocity;
  double velocity_offset;
  double torque_offset_amps;
} ActuatorCsvCmd;

typedef struct {
  double target_torque_amps;
  double torque_offset_amps;
} ActuatorCstCmd;

typedef struct {
  double  target_position;
  double  profile_velocity;
  double  profile_accel;
  uint8_t relative;
} ActuatorProfPosCmd;

typedef struct {
  double target_velocity;
  double profile_accel;
  double max_duration;
} ActuatorProfVelCmd;

typedef struct {
  double target_torque_amps;
  double max_duration;
} ActuatorProfTorqueCmd;

typedef struct {
  bool dummy;
} ActuatorResetCmd;

typedef struct {
  bool dummy;
} ActuatorHaltCmd;

typedef struct {
  double position;
} ActuatorSetOutputPositionCmd;

typedef struct {
  double velocity;
  double accel;
  double max_current;
} ActuatorCalibrateCmd;

typedef struct {
  bool enable;
} FaulterEnableCmd;

typedef struct {
  uint16_t cmd;
} JedSetCmdValueCmd;

typedef struct {
  double setpoint;
  double deadband;
  double persistence_duration;
  double max_duration;
} PidActivateCmd;

//////////////////////////////////
// Fastcat Commands
//////////////////////////////////
enum DeviceCmdType {
  COMMANDER_ENABLE_CMD,
  COMMANDER_DISABLE_CMD,
  EGD_CSP_CMD,
  EGD_CSV_CMD,
  EGD_CST_CMD,
  EGD_PROF_POS_CMD,
  EGD_PROF_VEL_CMD,
  EGD_PROF_TORQUE_CMD,
  EGD_RESET_CMD,
  EGD_HALT_CMD,
  EGD_SDO_SET_DRIVE_POS_CMD,
  EGD_SDO_SET_UNIT_MODE_CMD,
  FTS_TARE_CMD,
  EL2124_WRITE_CHANNEL_CMD,
  EL2124_WRITE_ALL_CHANNELS_CMD,
  ACTUATOR_CSP_CMD,
  ACTUATOR_CSV_CMD,
  ACTUATOR_CST_CMD,
  ACTUATOR_PROF_POS_CMD,
  ACTUATOR_PROF_VEL_CMD,
  ACTUATOR_PROF_TORQUE_CMD,
  ACTUATOR_RESET_CMD,
  ACTUATOR_HALT_CMD,
  ACTUATOR_SET_OUTPUT_POSITION_CMD,
  ACTUATOR_CALIBRATE_CMD,
  FAULTER_ENABLE_CMD,
  JED_SET_CMD_VALUE_CMD,
  PID_ACTIVATE_CMD,
  BAD_DEVICE_CMD
};

typedef struct {
  std::string   name;
  DeviceCmdType type;
  union {
    CommanderEnableCmd           commander_enable_cmd;
    CommanderDisableCmd          commander_disable_cmd;
    EgdCspCmd                    egd_csp_cmd;
    EgdCsvCmd                    egd_csv_cmd;
    EgdCstCmd                    egd_cst_cmd;
    EgdProfPosCmd                egd_prof_pos_cmd;
    EgdProfVelCmd                egd_prof_vel_cmd;
    EgdProfTorqueCmd             egd_prof_torque_cmd;
    EgdResetCmd                  egd_reset_cmd;
    EgdHaltCmd                   egd_halt_cmd;
    EgdSdoSetDrivePosCmd         egd_sdo_set_drive_pos_cmd;
    EgdSdoSetUnitModeCmd         egd_sdo_set_unit_mode_cmd;
    FtsTareCmd                   fts_tare_cmd;
    El2124WriteChannelCmd        el2124_write_channel_cmd;
    El2124WriteAllChannelsCmd    el2124_write_all_channels_cmd;
    ActuatorCspCmd               actuator_csp_cmd;
    ActuatorCsvCmd               actuator_csv_cmd;
    ActuatorCstCmd               actuator_cst_cmd;
    ActuatorProfPosCmd           actuator_prof_pos_cmd;
    ActuatorProfVelCmd           actuator_prof_vel_cmd;
    ActuatorProfTorqueCmd        actuator_prof_torque_cmd;
    ActuatorResetCmd             actuator_reset_cmd;
    ActuatorHaltCmd              actuator_halt_cmd;
    ActuatorSetOutputPositionCmd actuator_set_output_position_cmd;
    ActuatorCalibrateCmd         actuator_calibrate_cmd;
    FaulterEnableCmd             faulter_enable_cmd;
    JedSetCmdValueCmd            jed_set_cmd_value_cmd;
    PidActivateCmd               pid_activate_cmd;
  };
} DeviceCmd;

//////////////////////////////////
// Device States
//////////////////////////////////
typedef struct {
  bool enable;
} CommanderState;

typedef struct {
  double output;
} SignalGeneratorState;

typedef struct {
  double output;
} FunctionState;

typedef struct {
  bool output;
} ConditionalState;

typedef struct {
  bool output;
} SchmittTriggerState;

typedef struct {
  double output;
} SaturationState;

typedef struct {
  double output;
} FilterState;

typedef struct {
  bool   active;
  double output;
  double kp_term;
  double ki_term;
  double kd_term;
} PidState;

typedef struct {
  double raw_fx;
  double raw_fy;
  double raw_fz;
  double raw_tx;
  double raw_ty;
  double raw_tz;
  double tared_fx;
  double tared_fy;
  double tared_fz;
  double tared_tx;
  double tared_ty;
  double tared_tz;
} FtsState;

typedef struct {
  double   actual_position;
  double   actual_velocity;
  double   actual_current;
  bool     faulted;
  double   cmd_position;
  double   cmd_velocity;
  double   cmd_current;
  double   cmd_max_current;
  uint8_t  egd_state_machine_state;
  uint8_t  egd_mode_of_operation;
  uint8_t  sto_engaged;
  uint8_t  hall_state;
  uint8_t  target_reached;
  uint8_t  motor_on;
  uint8_t  fault_code;
  double   bus_voltage;
  uint32_t drive_temperature;
  int32_t  egd_actual_position;
  int32_t  egd_cmd_position;
  uint8_t  actuator_state_machine_state;
} ActuatorState;

typedef struct {
  bool enable;
  bool fault_active;
} FaulterState;

typedef struct {
  int32_t  actual_position;
  int32_t  actual_velocity;
  double   actual_current;
  bool     faulted;
  int32_t  cmd_position;
  int32_t  cmd_velocity;
  double   cmd_current;
  double   cmd_max_current;
  int32_t  cmd_ff_position;
  int32_t  cmd_ff_velocity;
  double   cmd_ff_current;
  uint8_t  actual_state_machine_state;
  uint8_t  actual_mode_of_operation;
  bool     async_sdo_in_prog;
  uint8_t  sto_engaged;
  uint8_t  hall_state;
  uint8_t  in_motion;
  uint8_t  warning;
  uint8_t  target_reached;
  uint8_t  motor_on;
  uint8_t  fault_code;
  double   bus_voltage;
  double   analog_input_voltage;
  uint8_t  digital_input_ch1;
  uint8_t  digital_input_ch2;
  uint8_t  digital_input_ch3;
  uint8_t  digital_input_ch4;
  uint8_t  digital_input_ch5;
  uint8_t  digital_input_ch6;
  uint8_t  digital_output_cmd_ch1;
  uint8_t  digital_output_cmd_ch2;
  uint8_t  digital_output_cmd_ch3;
  uint8_t  digital_output_cmd_ch4;
  uint8_t  digital_output_cmd_ch5;
  uint8_t  digital_output_cmd_ch6;
  uint32_t drive_temperature;
} EgdState;

typedef struct {
  double  voltage_ch1;
  int32_t adc_value_ch1;
  double  voltage_ch2;
  int32_t adc_value_ch2;
} El3602State;

typedef struct {
  uint8_t level_ch1;
  uint8_t level_ch2;
  uint8_t level_ch3;
  uint8_t level_ch4;
} El2124State;

typedef struct {
  double  output_ch1;
  int16_t adc_value_ch1;
  double  output_ch2;
  int16_t adc_value_ch2;
  double  output_ch3;
  int16_t adc_value_ch3;
  double  output_ch4;
  int16_t adc_value_ch4;
  double  output_ch5;
  int16_t adc_value_ch5;
  double  output_ch6;
  int16_t adc_value_ch6;
  double  output_ch7;
  int16_t adc_value_ch7;
  double  output_ch8;
  int16_t adc_value_ch8;
} El3208State;

typedef struct {
  uint16_t status;
  uint16_t cmd;
  uint32_t w_raw;
  uint32_t x_raw;
  uint32_t y_raw;
  uint32_t z_raw;
  double   w;
  double   x;
  double   y;
  double   z;
} JedState;

//////////////////////////////////
// Fastcat States
//////////////////////////////////
enum DeviceStateType {
  COMMANDER_STATE,
  SIGNAL_GENERATOR_STATE,
  FUNCTION_STATE,
  CONDITIONAL_STATE,
  SCHMITT_TRIGGER_STATE,
  SATURATION_STATE,
  FILTER_STATE,
  PID_STATE,
  FTS_STATE,
  ACTUATOR_STATE,
  FAULTER_STATE,
  EGD_STATE,
  EL3602_STATE,
  EL2124_STATE,
  EL3208_STATE,
  JED_STATE,
  BAD_DEVICE_STATE
};

typedef struct {
  std::string     name;
  DeviceStateType type;
  union {
    CommanderState       commander_state;
    SignalGeneratorState signal_generator_state;
    FunctionState        function_state;
    ConditionalState     conditional_state;
    SchmittTriggerState  schmitt_trigger_state;
    SaturationState      saturation_state;
    FilterState          filter_state;
    PidState             pid_state;
    FtsState             fts_state;
    ActuatorState        actuator_state;
    FaulterState         faulter_state;
    EgdState             egd_state;
    El3602State          el3602_state;
    El2124State          el2124_state;
    El3208State          el3208_state;
    JedState             jed_state;
  };
  std::chrono::steady_clock::time_point time;
} DeviceState;

//////////////////////////////////
// Signal
//////////////////////////////////

typedef enum {
  DATA_TYPE_BOOL,
  DATA_TYPE_INT8,
  DATA_TYPE_UINT8,
  DATA_TYPE_INT16,
  DATA_TYPE_UINT16,
  DATA_TYPE_INT32,
  DATA_TYPE_UINT32,
  DATA_TYPE_DOUBLE,
} data_type_t;

typedef struct {
  // Yaml input fields

  std::string observed_device_name;
  std::string request_signal_name;
  std::string cmd_field_name;

  // for data fetching and casting
  data_type_t data_type;
  void*       data_loc;
  double      value;

} Signal;

//////////////////////////////////
// Fault
//////////////////////////////////

enum FaultType { NO_FAULT, WARNING, ALL_DEVICE_FAULT };

//////////////////////////////////
// Actuator Position Data
//////////////////////////////////

typedef struct {
  double position;
} ActuatorPosData;

}  // namespace fastcat

#endif
